* 2025-01-31 수업 필기

html & CSS 
- SCSS 실습예제
- tailwund 이론 및 개념 / 실습예제

JS
- 33%정도밖에 진행 안됨
- 변수
- 자료형
- 형변환
- 제어문 (*조건문 && 반복문)
- 함수
- DOM (오늘)
- 객체
- 데이터 통신

TS
- 하루 1시간씩 진행


2월 20일까지 TS 이론까지 끝낼 예정
21일부터 TS와 REACT 동시에 들어감

------------------------------------------------------------------------------

** DOM **
// Document Object Model = 문서 객체 모델
// Document = html 문서 
// Object = html 문서의 모든 것을 객체화 함
// Model = 1개의 html 문서 안에 작성된 많은 태그들을 객체로 인식하고 해당 객체들 간 구조를(부모,자식,형제등등) 하나의 모델로 인식한다.

------------------------------------------------------------------------------

250131-JS 공부01 - index01.html 파일 구조

                 p.user / p.user / p.user
                                       |
         img.imgSrc / div#desc 
                  |
h1 / div#profile
    |
main
    |
body

html에서는 태그로 입력했지만, script에서는 객체로 인식해서 가져온다.

DOM Tree 형태라고 부르고 
tree 안의 요소 하나하나를 노드라고 부른.

*html파일과 JS파일을 비동기 시킬 때 defer 반드시 쓰기

------------------------------------------------------------------------------

* script01.js

01. 노드를 가져오는 두가지 방법 중 첫번째

console.log(document.querySelector());
document. // 뒤에 .이 붙었다는건 객체라는 의미
.querySelector(매개변수의 인자값) 매서드 함수
htmld의 h1은 태그가 아니라 노드다.

console.log(document.querySelector("h1"))
html에서 h1이라는 노드를 찾아와서 콘솔창에 찍어줘.

console.log(document.querySelector("#profile"));
html에서 profile이라는 아이디 속성값을 가진 노드를 찾아와서 콘솔창에 찍어줘.

console.log(document.querySelector(".imgSrc")); 
html에서 imgSrc라는 클래스 속성값을 가진 노드를 찾아와서 콘솔창에 찍어줘.


console.log(document.querySelectorAll(".user")); 
p.user 3개노드를 모두 찾아와줘
>> 콘솔창에 NodeList(3) [p.user, p.user, p.user] 라고 검색된다.
>> 유사 배열 형태로 찾아와진다. =  배열과 흡사하지만 이터너블한 객체에 비해 사용 가능한 함수의 제약이 있다.

querySelector : 1개만 찾아와줘
querySelectorAll  : 모두 찾아와줘

> Html 내 모든 요소 안에서 검색해서 찾아와서 getElementById에 비해 상대적으로 느림 /  새로운 문법임

------------------------------------------------------------------------------

* script01.js

02. 노드를 가져오는 두가지 방법 중 두번째 (이전 방식)

console.log(document.getElementById("profile"));
getElementById > ID는 1개 뿐이니까 html 내의 ID에서만 검색하니까 빠름

console.log(document.getElementsByClassName("imgSrc"));
getElementByClassName >  html 내의Class에서만 검색하니까 빠름

console.log(document.getElementsByTagName("h1"));
tag도 검색 가능

------------------------------------------------------------------------------

console.log(document.querySelector("h1").innerText);
> .innerText는안쪽의 요소만 찾아오는 것

console.log(document.querySelector("#desc").innerHTML);
> .innerHTML은 테그까지 찾아옴. 텍스트 변경 등을 줄 때 필요함

------------------------------------------------------------------------------

* style01.scss

 p {
        font-size: 1.4rem;
        &:first-child {
          display: none;
        }
        &:last-child {
          display: none;
        }
}
 
* script01.js
 
console.log(document.querySelector("#desc").innerHTML);
> .innerHTM는 display: none; 처리를 해도 콘솔창에 보여줌

console.log(document.querySelector("h1").innerText);
> .innerText는 display: none처리된 요소는 찾아오지 않음.

이후 ES6 문법으로
console.log(document.querySelector("#desc").textContent);
라는 것이 나옴.innerText와 유사해 보이지만 DOM 기준으로 스타일 시트에서 display: none처리되어있더라도, DOM에 이미 입력된 내용이기에 찾아옴.

------------------------------------------------------------------------------

** 사용자에 대응하는 이벤트를 만들기 위해 DOM을 배우는 것. **

1. document.querySelector("h1").innerText;
먼저 변경 할 값을 찾아옴

2. const title = document.querySelector("h1");
변수 값을 위에 반드시! 선언함

3. title.onclick = () => {
  title.innerText = "나의 프로필";
};
이벤트를 선언함
document.querySelector("h1").innerText;는   title.innerText 와 같은 것이니 변경해줌 ( 이건 예전 방식으로, 여러가지 기능을 주기 번거로워서 요즘에는 addEventListener 로 주고 있음)

위 아래는 같은 내용임.

title.addEventListener("click", () => {
  title.innerText = "마이 프로필";
});
매개변수 두 개를 줘서 설정함
뒤의 인자값은 함수 안의 함수니 콜백함수임. 최신 문법.
.innerText는 .innerHTML로 대체 할 수 있으나 차이점에 대한 개념을 알고 써야 함

------------------------------------------------------------------------------

const userName = document.querySelectorAll(".user");
const userName = document.querySelectorAll("#desc p");
const userName = document.querySelectorAll("#desc > p");

모두 같은 방식임 CSS와 선택자 구조를 같이 함.

const userName = document.querySelectorAll(".user")[0];
노드리스트 유사배열에서 0번째 p값을 찾아와라.

userName.addEventListener("click", () => {
  userName.innerHTML = "이름 : <b>태연</b>"
});
이름을 바꾸고 / bold로 바꾸고 태그라는 것을 알려주기 위해 innerHTML를 써주는 것임.

------------------------------------------------------------------------------

const pfImg = document.querySelector("#profile > img");
> 항상 먼저 변경할 요소를 찾아오고, 변수값을 선언하라.

userName.addEventListener("click", () => {
  userName.innerHTML = "이름 : <b>태연</b>";
  pfImg.src = "https://i.namu.wiki/i/Vy_PJ_q0Daz1_IfvLcv1cSrgsh0HStpDCcdTtQ9bxjiOts6bjBW6TQKaL23I1Rw4FtfUgMofFcg2TdEixnpXEQ.webp";
});

> userName을 클릭으로 이름도 사진 주소도 변경 시킴

------------------------------------------------------------------------------

스크립트에서 DOM 노드 요소의 스타일을 제어하고 싶을때 .style을 주고 그 뒤에 스타일 요소를 줘서 문자열로 제어한다. #코드는 문자, 즉 black/white로도 쓸 수 있다.

title.addEventListener("click", () => {
  title.innerText = "마이 프로필";
  title.style.backgroundColor = "#000";
  title.style.color = "#fff";
});

------------------------------------------------------------------------------

JS에서 가상 클래스 부여하기 = DOM이 있기에 가능함

1. 어떠한 클래스가 있는지부터 확인 하고 넣을지 뺄지 결정해야 한다.
html에서 <p class="user active">이름 : 아이유</p> 넣기

JS 에서 console.log(document.querySelectorAll("#desc p")[0].classList); 로 확인
콘솔창에 DOMTokenList(2) ['user', 'active', value: 'user active'] 라고 유사 배열의 형태로 가져옴.

2. SCSS 파일에서 설정
&.active {
          background: #ff0;
          color: dodgerblue;
        }

3. html에서 html에서 <p class="user active">이름 : 아이유</p>  active 삭제

4. JS에서 active 가상 클래스 제어
 userName.classList.add("active");
.classList로 어떤 클래스가 있는지를 확인한다. 배열의 자료 구조만 확인하는 역할만 함.
그 후 add("active")로 추가하는 것

5. 그 다음 active 클래스가 있으면 ~을 하고 없으면 ~해라 : 조건문 = if ~else 문

.contains 은그 값이 있으면 트루 / 없으면 false로 반환해주는 매서드 함수


 6. if(!userName.classList.contains("active")) {
    userName.classList.add("active")
  } else {
    userName.classList.remove("active")
  }
!userName.classList.contains("active") 부정 연산자
지금은  false인데  false의  false는 true가 됨. 

=> 클릭 할 때마다 바뀌게 됨. 

------------------------------------------------------------------------------

** index02.html - 250131-JS 공부03 - DOM 예제 **

lorem100 => 100개의 단어로 된 문장 만들어줌

const bodytag = document.querySelector("body"); = (document.body);
body는 document의 직계 자식이여서 이렇게 써도 됨

document.body는 별도로 선언 안해도 됨


.toggle은 있으면 주고 없으면 빼고 = > .add와 .remove의 합친거.






























