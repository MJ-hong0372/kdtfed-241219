** JS 필기 -250203- 월 **
- 오전에 JS
- 오후 SCSS 실습예제
- TS 오늘 부터 매일 오후 1시간씩

1. 변수
2. 자료형
3. 형변환
4. 연산자
5. 조건문
6. 반복문
7. 함수
8. DOM 

브라우저에 출력할 레이아웃을 설계할 때 > table을 활용해서  table 안에 table을 넣어서 만드는 것은 고전적 방식임.


-----------------------------------------------------------------------------------------

목업데이터
Mockup data

todolist 가 코테로 자주 나오는 이유
프로그래밍 요소 중요한 역할 구분
- C : Create - 쓰기
- R : Read - 읽기 (새로고침 했다고 사라지지말고)
- U : Update - 수정 (원할 때 수정 가능해야 함)
- D : Delete - 삭제 (언제든 삭제 가능해야 함)

이 4가지 기능이 있어야 프로그래밍 되었다고 판단함
퍼블리셔와 프론트엔드 개발자를 구별하는 기준이기도 함
const delItem = (event) => {
  console.log(event)
}

event 발생시 event의 target이 뭔지 항상 가장 먼저 확인

-----------------------------------------------------------------------------------------

** 당장 서버를 만들 수 없을 때 내 로컬 PC를 통해 임시 서버처럼 쓰는 법 **

개발자모드 > Application > storage > Session storage > 브라우저가 켜져있는 경우만 작동함
Application > storage > Local storage > 삭제하지 않는 한, 내 PC의 저장 공간 안에서 영구 보관함.

BUT 문제점
> 용량이 작음
> 보안에 취약함

* 서버는 세션이라는 공간 안에서 클라이언트가 하는 행위를 저장한다 > 일정 시간동안 클라이언트가 움직이지 않으면 세션에서 보안 기능으로 강제 로그아웃을 시킬 수 있다.*


-----------------------------------------------------------------------------------------


localStorage.setItem("hello", "world"); // 정보를 Local storage에 잠시 저장하는 법
const myData = localStorage.getItem("hello"); // 정보 불러오기 ( 키 값만 입력)
console.log(myData) // 콘솔창에서 확인하면 정보 값이 불러와짐

https://emn178.github.io/online-tools/sha256.html

사이트에서 id값을 입력해서  암호화 된 해쉬 을 받아와서 써야 한다. Output으로 암호화 된 값을 또다시 이 사이트에서 연속으로 해쉬하면 더 탄탄한 암호가 나온다.

id 값: 고유해야 함 // 지금 이 순간의 시간은 고유하다.
id: Date.now() 사용자가 입력해서 값이 생성되는순간의 시간을 밀리 초로 가져오겠다.

-----------------------------------------------------------------------------------------

const save = () => {
  localStorage.setItem("todos", JSON.stringify(todos));
};
Json
객체 표기법
여러 언어를 서로 해석해주는 것

제이슨 확장자로 데이터를 관리하게 됨.

-----------------------------------------------------------------------------------------

target.remove(); // 해당 타겟을 DOM에서 제거하지만, Application > storage > Local storage 에서는 제거가 안됨.







