* 2025-01-20 수업 필기


* 지난주 JS 복습 *

01. 변수 : var / let / const
- Template literal : `${변수} +문자`
 
02. 자료형 : 원시타입 / 참조타입
- 숫자 / 문자열 / 논리 / Symbol : 데이터 영역에서 바로 값을 가져 올 수 있음.
- 배열 / 객체 / 함수 / Map / Set : 데이터 영역의 주소값을 참조하여 객체 변수 영역에서 값을 가져올 수 있음. 
- 변수 안에 있는 값을 복제해서 사용 했을 때, 사본의 데이터 값이 변경됨 => 원본 데이터 값이 같이 변경되는지에 대한 여부 체크 필수!!!
- 배열 (*Iterable 객체)을 학습하게 되면, 참조타입 자료만의 독특한 특징을 계속 마주하게 될 것임.
- 배열을 잘 쓰려면 참조타입이 돌아가는 원리를 공부 하고 이해 해야 함.


03. 형변환 : 
- typeof 변수명(*식별자) => 타입을 알려주는 예약어
- 문자 + 숫자 : 문자형으로 바뀜
- 문자 - 숫자 : 숫자형으로 바뀜
- toString() : 포괄적 문자변환. // Unfefined는 안바꿔준다
// String() : 문자변환 // Unfefined도 문자로 바꿔줌
- Number : 소수점 살리고, boolean 값도 숫자로 바꿔줌 // parseInt : 정수로 바꾸기// parseFlaot : 소수점 살리기
-Booleab : 논리형 값 변환 truthy한 값은 0 / falsy한 값은 0

-----------------------------------------------------------------------------

* 오늘 배울 것*

04. 연산자
- 사칙연산 = + - / * 
- 나누기 : 나눈 이후 몫을 구함
- % => 나머지 값을 구하는 연산자 => 짝수 && 홀수를 구함 
- 짝수는 나머지가 0 // 그 외는 홀수

1) 산술연산자 => + - / * (사칙연산자)와 %(나머지값)
- %는 나머지를 구할떄에는 몫을 정수까지만 연산을 실행한 후 나머지 값을 도출한다.

2) 증감연산자 => ++ //-- 
- 증감 연산자는 피연산자와의 입력 위치에 따라서 먼저 연산을 시작할 수도 있고, 나중에 연산을 시작할 수도 있다.

3) 비교연산자 : == === (얕은 비교 / 깊은 비교) // != !==(같지않다 얕은 깊은 비교) // < > <= >=

4) 복합대입연산자 : += // -= // *= // /= // %=
- 특정한 값에 어떤 값을 추가시킨 이후에 최종 값을 인식하겠다.

5) 논리연산자 : ! (~가 아니다) // && // || (좌항 우항 중에 하나만이라도 참이면 참이다)
|| = or 이라는 의미

6) 연결연산자 : 문자열 + 문자열

7) "삼항 = 3항"조건연산자 : ** 연산자 중 가장 중요 ** 
- 1항 => 조건식
- 2항 => 1항이 참일 때 실행
- 3항 => 1항이 부정일 때 실행
- 2015년 ES6문법 때 등장함

<-> 나중에 제어문 (*반복문 & 조건문)과 많이 비교됨.

- 조건문을 쓰면 되는데 삼항 조건 연산자를 쓰는 이유는 React의 JSS 에서 제어문을 쓸 수 없기에, 연산자인 삼항조건연산자를 쓰게 됨
- 순수 바닐라 JS에서는 둘 다 많이 씀. 다만 뒤로 갈수록 쓸 경우가 거의 없게 됨.

-----------------------------------------------------------------------------


// 프로그래밍 언어에서는 데이터 쓰레기통이 있다 => Garbage Collector = GC 가 있다. 
// 너무 오랫동안 사용 안되거나 삭제되게 되면 GC로 자동으로 이동된다.

-----------------------------------------------------------------------------

* index.html 파일을 만든 다음 scrip.js 불러올 때 비동기 방식을 추구하기 위해 defer를 입력하라고 했음.
=> 이럴 경우 자바스크립트에서 document.write(str); 를 써서 index.html 파일에 테이블을 넣으려고 했을 때 비동기 상태라 나오지 않았을 것임.

=> defer로 비동기 방식으로 스크립트를 돌리는 경우는 스크립트 구문을 읽으면서 동시에 html 파일을 동시에 읽기 위해 쓰는 거임
=> html 파일이 비어있으면 찾아와야 할 요소가 없어서 스크립트도 불러올 수 없었음

-----------------------------------------------------------------------------

* 배포 02 *

Netlify => 소스코드가 git-hub에 올라가 있어야 한다. => 폴더를 새로 만들어야 함 => 깃헙에서 Create a new repository 생성 => 깃 허브에 파일 업로드

1. git init 
2. git remote add orgin https://github.com/MJ-hong0372/flex-project02.git
3. git remote -v 
4. git add .
5. git status
6. git commit -m "firstCommit"
7. git push orgin master


=> Netlify ( https://app.netlify.com/ ) 페이지로 이동





