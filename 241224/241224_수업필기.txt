코드 몇 줄을 잘 치는 것은 의미가 없는 시대가 왔다. 
이제 내년에 노 코딩 기반 생성형AI 개발 과정이 타 학원에 부쩍 늘었다.
우리는 타겟이 다르다. 
과거에는 코딩을 치는 주체가 개발자라는 직업군에 개발되어있었다면, 생성형 Ai가 나온 이 시점에서는 간단한 프로젝트가 개발자만의 영역이 아니게 되었다. 앞으로 코딩을 모르는 사람이라도 충분히 개발을 할 수 있게 되었다. 
이제는 노 코딩으로 간소화해서 프로그램을 자동으로 만들어 주는 세대임.

앞으로 개발자들의 입지는 줄 것이다

앞으로 퍼블리싱 과정은 소멸했다. 프론트,백,풀이라는 과정조차 소멸단계다. 하이브리드 융합 과정이 승인이 남. 
기획과 전략적 요소 + 프론트/백/풀스텍 개발자 과정만 승이남

예전 방식으로는 더이상 살아 남을 수 없음
능동적으로 공부하라

----------------------------------------------

* UX를 기반으로 UI를 구현하고, 구현된 UI를 바탕으로 웹앱 서비스를 구축
--> 어떤 서비스를 구축하는데, 해당 서비스가 "왜 필요한가"라는 질문에 답을 얻고 해당 질문에 맞는 화면을 구현하고, 이를 서비스로 실행한다. 라는 뜻임.

*UX : User Experience = 사용자 경험 // UI로부터 발생한다. (*이미 만들어져있는 시스템 혹은 상품 혹은 서비스에서 경험 도출) 

----------------------------------------------

* 우리가 어떤 서비스를 만들어보자

1. 문제인식
- 파편화 되어있는 정보 수집 : 뉴스 / 기업데이터 / 정부 자료 / SNS 등(날것. 진의를 알 수 없음.) 
- 실제 실무 : 카드사 // 스마트폰 정보 기반 유료 구매
회사는 유료 정보 기반으로 미리 다음 서비스를 구축이 끝나 있다.


- 필드리서치 : 현업 관계자 혹은 산업 담당자 리서치
- 데스크리서치 : 공공데이터 포털 / 트랜드랩 / 연관키워드 사이트 (네이버 데이터 앱) 

2. Target : 누구를 위한 앱인가
- 성별 
- 나이 타겟층 선별

3. Persona : (네이버 검색광고) 내가 원하는 주제나 키워드에 대한 연관 검색 가능. 
- 특정 성별, 나이대에서도 >특정 목표,목적<에 관심이 많은 사람들로 좁힘
- 이들을 대상으로 UI 디자인을 하자. 

4. 목표 

5. 서비스 도출


1~4 UX 만들고 5번 UI 제작  => 서비스 구현


*예시 : 소개팅 앱 서비스
-문제점 : 구글플레이 ( https://play.google.com/store/games?hl=ko&pli=1 ) > 소개팅앱 인기순위 검색 > 상위 앱의 평점 및 리뷰 확인 > 별점 1점대 확인 > 해당 앱들의 장점이 아니라 단점, 못하는 것만 확인한다. > 문제점 확인 후 목표 정함 > 시각적 UI 제작 > 

----------------------------------------------

* JS > Class
>항상 비슷한 혀태의 객체를 생성해야 하는 상황이 연출될 떄, 매번 개발자가 해당 객체를 일일히 생성하는 것이 비효율적인 경우!
>Class 선언 > 똑같은 형태의 객체 생성해 주지만, 프로토 타입의 객체 매개변수를 무엇을 주는가에 따라서 세부적인 정보만 교체 해줄 수 있음.  > 업무의 간소화 => 인스턴스 = 붕어빵 틀로 인스턴스를 찍어낸다고 표현 > 틀 안에 내용만 넣으면 됨


----------------------------------------------

*웹 브라우저 (*Client)

-개발자의 코드를 다음과 같은 프로세스로 처리 함
- 코드를 읽는다 = 파싱(Passing)
  - html 학장자를 가장 최우선으로 찾아서 Pasing(대원칙)
  - index 파일명을 default 값으로 최우선으로 Pasing
  - index 최우선은 react / next / firebase 모두 동일하다.
  - 먼저 입력한 순서대로 코드를 Passing한다.

- Stack(*쌓다) 형식의 구조
정식 명칭 : Call Stack : 컴퓨터의 자동 방식

  - CSS를 굉장히 빨리 읽으며 동시에 body를 읽기 시작함.
  - 실시간으로 CSS 코드를 적용시키며 읽음
  - 문서가 길면 가끔 html만 먼저 읽혀서 CSS가 순간 깨지기도 함.
  - CSS는 프로그래밍 언어가 아님. 그래서 html과 실시간 소통이 가능
  - script는 내용을 다 읽어야만 적용이 된다. 
  - script와 link(CSS)를 뭘 먼저 불러오는지는 전혀 상관도, 차이도 없다.
  - 그러나 script를 body 전에 불러오는지 body 후에 불러오는지는 큰 차이가 있다. 
  - body 후에 script를 쓰면 문제가 발생할 가능성이 크다. 실무에서는 body 위에 쓰는게 맞다. 
  - 그러나 script에 defer를 쓰면 script과 html을 동시에 읽게 되는 비동기 방식으로 적용된다.  
  - script 파일이 여러개 일 때 모든 script에 defer를 쓰는게 아니라 하나의 script 파일 안에 각자 기능에 맞춰 쪼개서(모듈화) 몰아 넣는다. = 번들러
  - 여러개의 script를 쓰는 이유는 타인이 만든 라이브러리를 가져오는 경우임.
  - 이러면 처리 속도가 느려짐 > 어쩔수 없이 멀티 미디어의 사이즈를 줄이는 것 밖에는 답이 없음 > 이걸 해소하기 위해 나온게 react임. > react는 모든 이미지와 요소를 최초에 1번 모든 데이터를 서버에서 내려주고 사용자가 원하는 페이지를 서버로 다시가지 않고 바로 줌. > react의 단점은 맨 처음에 서버에서 클리이언트가 받은 데이터가 너무 많아서 최초 마운터 시 속도가 느림. > next에서는 사전 렌더링을 해줌. 메인 데이터를 누가 요청하지 않아도 사전에 그냥 압축해두고 누가 요청하면 바로 던져줌. 

- 읽은 코드를 실행시킨다 = 실행(Executing)

----------------------------------------------

CSS : Cascading style sheet

Cascading : 폭포수(부모가 자식에게 상속) style : 스타일 sheet : 종이 혹은 문서

----------------------------------------------

script 사용하는 이유

사용자의 이베트 행위에 따른 인터렉티브한 페이지를 구현하고자 할 때

----------------------------------------------

포트폴리오 제작
- 나라는 지원자가 뭘 잘 할 수 있고, 그동안 뭘 해왔고, 주 언어가 뭐고, 그동안의 경험 등을 컨셉 & 스토리를 활용하여 멋있게 보여주는 것이 포폴임. 
- 잘 된 포폴인지는 Structure부터 보게 되어 있음.
- Identity
- Concept
-Storytelling

----------------------------------------------

오타 => 에러(*버그)=> 수정(디버깅)

트러블 슈팅

CSS => 문제 발생 => 즉각적으로 알려주는 컴파일 CSS 가 있음.

Compile 언어 : 번역 : TS // Java
속도가 느리나 안전함 / 입력된 코드의 참과 거짓을 판단. 오류시 멈춤.
- SASS 라고 불렸으나 > SCSS 로 변경 됨
- Sassy : 
- SCSS는 브라우저가 인식을 못하기에 compile로 CSS로 바꿔주는 작업 후에 html에 연결하면 됨 
>VScode에서 이걸 해주는 게 Live Sass Compiler 확장팩임

Interpreter 언어 : 통역 : JS
속도가 빠르다 / 오류조차 즉각 적용됨

-----------------------------------------------

컨트롤+, >촤측 확장 탭 > Live Sass Compiler 클릭>  Live Sass Compile › 우측 창 상단 목록> Settings: Generate Map
Set to `false` if you don't want a `.map` file for each compiled CSS.
Default is `true` > 하단 파란 글자 클릭 > 설정 된 것임 > 컨트롤+S

-----------------------------------------------

SCSS에서는 확장자 URL 생략 가능

@import url(./style/reset.scss); = @import "./style/reset";









