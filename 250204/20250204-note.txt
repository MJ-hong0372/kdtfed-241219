* 2025-02-04 (화) JS 수업 *

1.변수
2. 자료형
3. 형변환
4. 연산자
5. 조건문
6. 반복문
7. 함수
8. DOM
9. EVENT <- 오늘 배움
- 브라우저를 통해서 특정 웹 페이지 도착
- 사용자가 하는 행위의 모든 것
- 특정 페이지를 확인 // 버튼 클릭 // 스크롤 이동
- 이번트를 설정
- event handler => onclick (과거에 많이 씀)
- addEventLisner() (현재 많이 쓰이게 됨)
- 이벤트 설정 후 > 이베트가 실행하게 되면 > 로컬 컴퓨터 안에 > 메모리 공간 안에 > 이벤트 객체가 생성이 됨 > 입벤트 객체를 참조 변수 값으로 찾아 올 수 있다.
- 이벤트 객체 > preventDefault() => 이벤트의 유일한 메서드 함수. 나머지는 다 속성 값임

-------------------------------------------------------------------------

* 이벤트 속성 종류

1. 문서(document)로딩 이벤트
- load : 개발자가 작성한 문서를 모두 로딩하면 실행하도록 하는 이벤트 종류
window.onload = alert("안녕하세요"); // window는 생략 가능 // onload => 우리가 작성한 문서의 header부분을 모두 읽었다는 것. 문서를 모두 로딩하면 알림창이 뜨게 해주세요. => 경우에 따라 이 명령어를 쓰면 defer를 html을 안 써도 됨 = 문서를 읽으면 실행해주세요.라는 명령어기 때문. / defer는 html과 스크립트트를 비동기적으로 읽지 못해서 쓰는 속성이기에 이렇게 쓰는 경우도 있음. // window.onload = () => {};

- resize : 디바이스 사이즈의 영향을 받아서 문서 화면 크기가 변경되었을 때 사용하는 이벤트 종류 ( 웹페이지를 모바일 등으로 봤을 때)
html과 CSS를 통해 미디어쿼리를 쓸 수 없을 때 사용 함.

-------------------------------------------------------------------------

2, 마우스(mouse) 이벤트 ( 터치 이벤트와 다름)
- 압도적으로 가장 많이 사용되는 이벤트

- click : 버튼 혹은 특정 요소들을 클릭했을 때 실행 되도록 하는 이벤트
- dbclick : 더블클릭 / 버튼 혹은 특정요소들을 더블 클릭했을 떄 실행되도록 하는 이벤트 
- mousehover : 특정요소 위에 마우스를 올렸을 때 ( 버블링 기본 적용)
- monseout : 특정요소에서 마우스를 떠나게 했을 때 ( 버블링 기본 적용 )
- mousehover & monseout : 마우스 버블링 발생, 두개가 같이 세트
- moseenter : 특정요소 위에 마우스를 올렸을 때 ( 버블링 미 적용 )
- maoseleave : 특정요소에서 마우스를 떠나게 했을 때 ( 버블링 미 적용 )
*버블링은 적용해야 할 때는 적용해야 하고 아닐땐 상황에 맞춰 쓴다.

-------------------------------------------------------------------------

3. 키보드 이벤트

- keydown : 사용자가 키를 누르고 있는 동안 발생되는 이벤트
- keyup : 더 많이 쓰는 이벤트. 어떤 키를 눌렀는지 정보를 파악 할 수 있음 / 사용자가 키를 눌렀다가 키에서 손을 뗄 때 발생하는 이벤트.

이벤트가 발생되어지는 시점이 키 손떼기 전이나 후냐 차이밖에 없음

document.body.addEventListener("keydown", (event) => {
  document.querySelector("#result").innerText = `coad : ${event.code}. key : ${event.key}`;
}); // 나중에 유효성 검사 시 필요함 - 회원 가입 때 특정 단어들을 못 쓰게 막을 수 있음. 유효하지 않은 정보를 넣을 시 회원 가입을 차단 할 수도 있음.


-------------------------------------------------------------------------


4. 폼 이벤트
- 포폴 안에도 폼을 이용한 예제 하나는 꼭 넣기
- 신입에게 몹시 중요함

- change
- focus
- blur : 탭 키를 누르면 
- submit : 정보를 서버로 보내려는 특성이 있음 / 무력화 해야 함 


// form.addEventListener("submit", (event) => {
// });  // event는 e로 쓸 수 있다.
form.addEventListener("submit", (e) => {
  e.preventDefault(); // submit이 서버로 보내는 기능 무력화
});


-------------------------------------------------------------------------

함수 형태 3가지 

- 함수 선언식 : 기명함수
>function 함수이름() {}

- 함수 이름을 매번 쓰는것에 대해 불편 : 익명함수가 나옴
- 익명 함수 :
> const 변수명 = function () {}
- 부모 요소를 this로 가져옴

- 2015년 화살표 함수가 나와서 더 간략하게 씀
> const 변수명 = () => {}
> 화살표 함수의 this는 window라고 기본 설정이 되어 있음

=>함수는 이렇게 3가지 형태만 있음.

>콜백 함수는 구조적 형태의 문제지 위와는 개념이 다르다.
함수안에 함수가 있는데 호출 권한을 부모에게 주느냐의 문제임.
콜백함수가 익명함수나 화살표 함수로 쓰이는 것일 뿐.
콜백 함수가 익명함수로 쓰일때와 화살표 함수로 쓰일 때 this 대상이 달라질 뿐

-------------------------------------------------------------------------

* Modal 창 *

Modal : 1개의 페이지 안에서 별도의 URL을 생성하지 않은 상태로 추가 정보를 제공해줄 수 있도록 보조 페이지를 구현하는 방법.

> 포트폴리오 홈페이지 <
- A라는 프로젝트 진행에 대한 대략적인 정보를 메인 페이지에서 전달 
> detail버튼 클릭 
> 프로젝트 세부 정보를 다른 페이지로 이동시키지 않고 해당 페이지 내에서 바로 보여주는 역할
- 이전에는 별도의 html 혹은 url로 이동했으나, 요즘에 이렇게 하면 사용자 이탈이 너무 많음. 새 페이지가 나오면 나갔다 들어오는 불편함.

html에서 모달 페이지가 생성되기 전 후를 먼저 만들고
그 후에 모달 페이지를 만들어야 함.
  <!-- modal before -->
  <button id="open">프로필 보기</button>

  <!-- modal after -->

-------------------------------------------------------------------------

5. 페이지 이벤트
- pageX : 문서(코드를 작업한 작업 데이터)를 기준으로 X축으로 부터 얼마큼 이동한 곳인지 확인 시켜 줌.
- pageY : 문서(코드를 작업한 작업 데이터)를 기준으로 Y축으로 부터 얼마큼 이동한 곳인지 확인 시켜 줌.

- screenX : 현재 화면을 기준으로 X축으로 부터 얼마큼 이동한 곳인지 확인 시켜 줌.
- screenY  : 현재 화면을 기준으로 Y축으로 부터 얼마큼 이동한 곳인지 확인 시켜 줌.

-------------------------------------------------------------------------

** 슬라이드 페이지 **

> 가장 난이도가 쉬운 버튼 > 좌 우측 버튼 클릭 시 슬라이드 아이템이 정적으로 교체되는 것.
> 좌 우측 버튼을 클릭했을 때, 좌 우 이동 하는 것 (마지막 아이템에 도착했을 때 다시 처음으로 돌아가는 기능 없음)
> 좌 우측 버튼을 클릭했을 때 좌 우 이동 (마지막 아이템에 도착했을 때 다시 처음으로 돌아가는 기능 있음) = 무한 슬라이드
> 무한 슬라이드 + 자동 슬라이드( 일정 시간마다 옆으로 이동) 

> 하단으로 갈 수록 난이도가 올라감.


-------------------------------------------------------------------------

노드를 만들어 낸다면
노드의 속성 또한 만들어 낼 수 있다. 


-------------------------------------------------------------------------

스크립트로 만든 요소가 항상 최우선적으로 위로 온다.
그래서 버튼이 뒤로 감.
CSS 파일에서 z-index: 100; 로 위치값을 해결한다.




























































