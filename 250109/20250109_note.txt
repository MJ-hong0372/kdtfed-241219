*2025-01-09 수업필기

* 앞으로도 뜰 개발 분야 *
- 보안 영역 개발자 - 암호화 영역
- 임베디드(Embedded) 영역 - 시스템 내부에 탑재된 컴퓨터를 뜻하는 내장형 시스템 (ex 전기차 내부 개발 )
- 3D 영역 개발 - 스크립트로도 가능 // 웹 기본 상식 + 기본 수학 개념을 통한 공간 표현능력

--------------------------------------------------------------------------------

* : 와일드카드 = 전체 선택자

color: inherit : 상속 = 부모요소에서의 상속 // 부모요소가 기본 값이 없으면 웹 기본 폰트 컬러 설정은 검정임.


height: 100%; --> 자식요소들의 높이 값을 그대로 허용해 주겠다.

justify-content: space-between; 과
justify-content: space-around; 의 차이점 

--------------------------------------------------------------------------------

filter: saturate(0.7); 필터 속성으로 채도값을 0.7 떨어트림.

--------------------------------------------------------------------------------

1. SSR :
- Server Side Rendering
- Client가 요청할 때마다 Server가 요청을 받은 페이지를 매번 새롭게 전달해주는 방식 
- 요청받은 만큼 새롭게 불러오기 때문에 페이지가 변동되며 불려옴
= 예전 방식
- 이미지 용량 : 저용량이면 페이지가 빨리 불려오지만 // 고용량일 경우 로딩 시간이 오래걸림 백지상태가 되어버림. 그래서 기본 body의 background 색상을 부여해주는 것. (페이지 로딩 중임을 사람들에게 알려주기 위해)

2. CSR :
- React.js > single-page-application 를 가능하게 해주는 라이브러리
- Client Side Rendering
- Client가 어떤 페이지를 요청
- 해당 메인 페이지 뿐만 아니라 메인 페이지 안에 연결 되어 있는 페이지의 소스 정보를 한번에 Sever가 Clien에게 전달함
- 다른 페이지로 이동 시 깜박거림의 불편함이 해소.
- 페이지 이동 시 매우 빠르게 이동

3. SPA :
- single-page-application
- 1개의 html> 복수의 JS 연결해서 여러개의 페이지를 구현할 숭 있도록 만든 앱 설계 방식의 페이지
- page routing 이라고 부름

4. React.js 의 단점
- 사용자 입장에서 특정 웹사이트의 메인 페이지를 처음 열어볼 때, 만약 메인 페이지 안에 고용량의 동영상 혹은 이미지가 들어있었다면 -> 해당 메인 페이지를 로딩해오는데 렉이 걸리면서 끊겨서 굉장히 더디게 출력 됨

- Client가 최초에 Sever에게 받아 와야 하는 데이터들이 굉장히 용량이 큰 경우 해당!!

- TTI : Time To Interval
=> Client가 Sever에게 페이지를 요청한 이후에 FCP 단계까지 도달하는데 걸리는 인터벌(간격) 시간

- FCP가 비효율 적이다. 라고 부름
=> First Contenful Paint
=> Client가 Sever로부터 요청한 데이터를 브라우저에 최초로 출력 시킨 상태를 뜻함

=> 페이지에 동적으로 인터렉티브한 모션을 넣기 힘들어짐

--------------------------------------------------------------------------------

5. SSR 로 회귀하자 (*최신)
- Sever가 client의 요청에 따라서 Data를 전달하는 방식은 예전과 다를 바 없음

- pre-Rendering (*사전 렌더링) 방식을 통해 회귀 = Client가 뭘 요청하던 바로 전달할 준비를 미리 해 두는 것

- Sever가 미리 값을 줘도 되는 페이지인지 / Client 요청에 의해 변동될 수 있는는 페이지인지를 구분해서 요청하고 Sever와 통신함

--------------------------------------------------------------------------------

* 배포 *
* Netify //  https://www.netlify.com/
* git-hub 에 올린 파일이 업데이트 되면 업데이트 된 내용도 자동 배포함.


1. Google > Chrome > git 설치

2. cms > 관리자 권한으로 접속 > git -v 엔터 >깃 버전 확인
- git config --list > 깃 소유주 확인

3. 로컬 컴퓨터에 > git 소유주 정보 등록
- git config --global user.name "git-hub이름명"
- git config --global user.email "git-hub 가입 이메일 주소"
- git config --list (*소유지 주소 정보 조회)


4. git-hub 속에 배포하고자 하는 배포전용 repository 생성 해야 함

수료 시기 즈음
> 본인들의 git-hub 메이크업
> 포트폴리오 홈페이지 > 개별 포트폴리오 작업물 소개가 필요
https://github.com/MJ-hong0372/profile_250109

>프로젝트 별로 repository 생성하고 read me 꾸며두기

> 아무 폴더에서나 git init을 하면 안됨
-git init : 현재 폴더에서 staging area //버전관리 폴더를 이 폴더를 기준으로 하겠다는 명령어 그 폴더에 .git 이라는 버전관리 폴더가 생성되어서 
상단의 .git 버전관리 폴더와의 충돌이 생김

>배포할 root 폴더로 파일 이동 후 초기화 선언
git init 

>원격 제어할 repository 주소 입력
git remote add orgin https://github.com/MJ-hong0372/profile_250109.git

>나의 git-hub와 연결 확인
git remote -v

>모든 데이터를 대기 공간에 넣겠다
git add .

>stage 중인 데이터 확인
git status

>firstCommit이라는 이름으로 데이터를 전달하겠다.
git commit -m "firstCommit"

>master라는 Branch로 전달하겠다.
git push orgin master


* 기본 배포 준비 완료 *

------------------------------------------------------------------------------

* 배포 하는 법 *
>>Netify // https://www.netlify.com/ 로 이동 > git-hub로 로그인

- Add new site > Import an existing project 
> Let’s deploy your project with… 페이지로 이동 
> git-Hub로 이동 > 원하는 repository 선택 
> Site name 지정 > Check availablity 버튼으로 사이트명 사용 가능 여부 체크
> Branch to deploy > Branch가 여러개면 원하는 걸 선택한다.
> Build command는 나중에는 기재 해줘야 함
> Deploy mjprofile-250109 버튼 클릭 
> 완료 

> 수정 된 데이터를 git-hub에 실시간으로 바로 바뀜
> VScode 에서 > git-hub 확장 앱 버튼 클릭 후 > 상단에 원하는 메세지 쓰고 > 커밋 버튼 누르면 바로 업로드 됨. > 팝업창에서 "예" > 소스제어 옆 ...버튼 > 푸쉬 클릭 > 


--------------------------------------------------------------------------------


** 다음 과제 부터는 배포 된 제품을 제출해야 함 **
** 배포 되지 못한 프로젝트는 완성된 게 아님 **
** VScode 발표는 인정되지 않음 **


--------------------------------------------------------------------------------

* transition : 전환 속성 *

> :active  // click 후 반응

> A가 B로 변경되는 순간을 제어할 수 있또록 하는 속성
> 얼마큼 천천히 // 얼마큼 빨리 // 어느 정도의 시간동안 // 얼마나 기다렸다가
어느 정도의 가속도로 // 어떤 감속으로

> transition의 대표 4가지 속성
> transition-property : 어떤 속성(property)요소에 상태 변화를 적용 할 것 인가.
> transition-duration : 얼마의 시간동안 상태변화를 진행되도록 할 것 인가.
> transition-timing-function : 어떤 가/감속을 적용할 것인가 ( https://cubic-bezier.com/ )
> transition-delay : 얼마의 지연 후 상태변화를 진행하게 할 것 인가.

* transition 한 줄로 축약해 쓰기 *
>> transition : background 1s linear 0s, width 4s esey-out 1s ;
>> transition : (property) (duration) (timing-function) (delay);

--------------------------------------------------------------------------------















