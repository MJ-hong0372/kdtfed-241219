* 2025-01-10 수업 필기 *

------------------------------------------------------------------------------------------
*애니메이션 효과*

애니메이션을 적용시길 대상에 절대 위치 좌표 ( position : absolute; )를 줘야 기준점이 되어서 애니메이션을 줄 수 있다.

1초 영상
> 29개의 프레임
> 29개의 정지된 스틸 이미지로 완성

CSS에서 frame을 만들어서 애니메이션을 만든다는 것
프레임을 선언해서 각각의 변화를 줘야 함.

@keyframes 애니메이션이름 {
        0% { 애니메이션의 시작 }
        30% { 중간 프레임 01 }
        70% { 중간 프레임 02 }
        100%{ 애니메이션의 끝 }
      }
0% = from / 100% = to 로 대체 가능


@keyframes cicle {
        0% {
          left: 0;
        }
        100% {
          left: 500px;
        }
      }

설정 후, 원하는 요소에 가서 animation 속성을 설정해준다. 
animation-name 
> keyframes를 정의해서 정의한 애니메이션 이름을 입력

animation-duration 
> 실제 실행하고자 하는 에니메이션을 얼마의 시간동안 실행시킬지 결정

animaton-timing-funtion
> 구현되는 애니메이션의 가속도를 어떻게 설정시킬지

animation-iteration-count: infinite ;
>구현되는 애니메이션의 반복 횟수를 결정 // infinite : 무한

animation-direction: alternate;
> 애니메이의 진행방향을 결정 (defalt = 일방통행 // 반대로도 실행할지 설정 가능)

animation-play-state: paused ;
> 애니메이션 실행상태를 제어할 때 사용 : 일시정지 ;

animaition-delay 
> 얼마의 시간 이후에 애니메이션을 실행시킬 것인가

애니메이션은 100%가 끝나면 자동으로 0%로 가서 대기하게 됨

>> 축약방법
animation: cicle 2s linear none infinite alternate;

------------------------------------------------------------------------------------------

> 각각의 조합은 제품 서비스, 누구를 대상 // 왜 만드는 것인지 // 목표가 뭐인지에 따라 달라진다. 늘 고민하며 제작하기

나중에 gsap, threejs, anime 등의 자바스크립트 요소로 애니메이션 제작 예정
> 화면에 어떤 인터렉티브하며, 크리에이티브한 요소를 창작해서 넣는 작업에 정답은 없다.
> 이건 본인이 결정할 일

------------------------------------------------------------------------------------------

> 전환 : transition
> 애니메이션 : animaition
> 변환 : transform
> deg : 각도

------------------------------------------------------------------------------------------

* transform 변환 속성 *

> html을 통해서 만든 요소(element)들의 형태 혹은 위치를 변환시킬 때 씀

1. 각도의 변환
2. 크기의 변환
3. 기울기의 변환
4. 위치의 변환

=> x, y, z 축으로 변환 가능. 
=> "z 축"의 도입이 html5의 큰 차별성

------------------------------------------------------------------------------------------

* transform
>>이 속성은 값을 적는 절대적 순서가 정해져 있지는 않다. 그러나 쓰는 순서가 무척 중요함 // 앞의 속성부터 처리하고 뒤의 값을 처리하기 때문에 뭘 먼저 쓰는지 내가 설정해서 써야함

> rotate
>> 시계방향은 양수 / 반시계방향은 음수 / 기준점은 항상 객체의 중앙

> scale
>> 100%는 1 / 

> skew =>기울기
>> x / y / z 축 기준으로 기울이기

> transform-origin : 100% 100% ;
> origin(근본 / 기준점)을 변경하는 속성
>transform-origin :  X축의 맨 끝 Y축의 맨 끝 ;
> transform-origin : 100% 100% ; = transform-origin : right bottom ; 
같은 값임. 

------------------------------------------------------------------------------------------

* 3차원 전환 함수

> 애니메이션은 하단에 별도로 선언해야 함

> 자식 요소에 3D 요소를 줬다면 부모요소에 반드시 transform-style: preserve-3d;라고 입력 해줘야 함

> backface-visibility: hidden; 
> 뒷 면을 보이지 않게 숨겨주는 명령어 / 객체 자체에 주는 명령어

> Perspective = 관점 => 원근법
> 사진 촬영 때, 2D 요소를 하나의 장면으로 담는 것, 공간을 담을 수 없음.
> 가까이 있는 사람과 멀리있는 사람 => 크게 VS 작게 => 원근감 적용되었다고 함
> CSS 사용자가 모니터를 바라보는 상황에서 상대적으로 사용자에게 가깝게 느껴지도록 하는 속성 => 위치 속성 중 z-index : 값이 클수록 앞으로 튀어나오는 듯 보임
>> BUT!!!! Perspective 
=> 기본적으로 3D값을 가지고 있는 요소들의 Z값의 default는 0에서 시작함.
=> Perspective의 값이 클수록 해당 요소를 바라보는 간격이 커진다고 이해하면 됨.

> Z축에 대해 더 자연스럽고 깊이 있게 줄 수 있음
> Perspective이 높아진다는 것은 사이를 채우는 픽셀값이 많아지는 것
> 보통, web에서 사람의 눈으로 볼 수 있는 한계가 72dpi여서 그 이상을 안주는 것.
> 3D에 대해 느끼는 공감감을 늘리기 위해 Perspective를 높이면 더 많은 망점을 찍어서 깊이감을 더 줌. 공간을 더 짧게 쪼개서 많게 해줘서 공감감을 준다는 것.  
> 모든 객체가 다 표시되고 있는 화면을 가지고 있는 부모 요소에 줌. 

> 내가 주고자 하는 입체감의 2배수가 적당함

------------------------------------------------------------------------------------------

*position: absolute; 이 지점부터 다시 시작해서 절대값을 주겠다.
> 부모에게 position: absolute;가 있어도 자식도 position: absolute;을 줄 수 있음.
> 안쪽으로 가면 양수 값 / 밖으로 뺼꺼면 음수 값
> transform은 마지막 속성 값만 받음. 위에서 transform으로 SUN 위치를 조절해도, 하단에서 @keyframes sun에서 transform을 주면서 상단의 transform 값이 무시 당해서 태양 위치가 변동됨. 이럴때 margin 값으로 위치 조절한다. 
.sun 값에 margin-left: -100px; 을 줘서 위치 값을 조절한다.
> 해당 요소에 transform-origin: center 500px; 중심 축을 이동해서 자전이 아니라 공전하게 만든다

> overflow: hidden; 요소가 전체 너비보다 커졌을 때 스크롤바가 생기지 않도록 설정

>img를 겹칠때 나타나는 순서에 따라 html에서 잘 써야 한다. 
>> position: absolute; 를 주는 순서에 따라 마지막에 position: absolute; 를 적용한 img 마지막 요소가 맨 앞으로 나온다는 구조를 이해해야 한다.

------------------------------------------------------------------------------------------

> 로딩 스피너 : main 페이지가 뜨기 전에 로딩 중에 뜨는 화면

------------------------------------------------------------------------------------------

* Figma => Vatiavle
>작년 6월 베타 서비스 
> 작년 8월 정식 서비스
>
 















