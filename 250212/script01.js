// 자바스크립트 내부에도 기본적으로 내장되어 있는 객체들이 있음.
// Math() => 수학객체
// Date() => 날짜객체 (오늘 다룰 내용)

// 이후 자바스크립트의 class를 배울 것임
// class를 쓰는 이유 : 자주 반복적으로 빈번하게 유사한 형태의 객체를 만들어서 사용해야 하는 경우, 일일히 그때마다 객체를 생성해야하는 비효율성을 우리는 개선하기 위해서 class를 사용한다.

// CLass를 통해서 객체의 모델을 하나 생성하게 되면 

// 모델은 모델일 뿐 => 실제 객체로서의 역할을 할 수는 없음.

// 다만, 해당 모델을 가져다가 사용을 하면, 객체(*최초로 설정해놓은 모델이 가지고 있는 속성 & 메서드 함수를 그대로 상속받아서 사용 할 수 있는) 복체품이 탄생이 됨.

// Class를 통해서 만들어진 모델을 가져다가 사용할 때에는 반드시 규칙이 있음. => new라는 예약어를 사용하기로 약속!!!

// Date() => 날짜객체는 무조건 new라는 예약어를 써야만 사용 할 수 있음(class란 얘기)

// Cladd를 통해서 만들어진 해당 모델 => Prototype이라고 부름름 


// new Date(); // Prototype임
let arr = new Array(); // 내장 객체 = Prototype 
// const arr = [1,2,3]; 이건 약식으로 쓴것임. 위와 같은 배열임. 
console.log(arr);

// new Date("2025-01-14") 이라고 입력하면 인자값의 정보를 찾아옴
// new Date(2025,1,10) 위와 동일한 방식

// new Date("2025-02-14T23:59") T를 써서 시간까지 찾아오기 

// 자바 스크립트 내부에서 시간 관련 된 무언가를 할 때 반드시 인지해야 하는 기본 상식!!!

// 01. 대부분의 프로그래밍 언어에서는 시간을 인간 친화적인 방식으로 카운트를 하지 않는다!!!

// 밀리초 ms 단위 개념

// 1초 = 1000 밀리초 (프로그램 영역에서는)
// 1분 = 60 * 1000 = 60,000밀리초
// 1시간 = 60 * 60 * 1000 = 3,600,000밀리초
// 1일 = 24 * 60 * 60 * 1000 = 86,400,000밀리초

//  02. 자바스크립트는 지금 이순간에도 우리의 인간계 시간을 밀리초로 변환해서 계산하고 있다!!!

//  1970년 1월 1일 기준으로 시작됨
// 왜 1970년 1월 1일 00:00:00 UTC인가?
/* 유닉스 운영체제가 개발되던 당시(1969~1970년), 컴퓨터 시스템에서 날짜와 시간을 표현하는 방식이 필요했어. 당시 유닉스를 만든 AT&T 벨 연구소의 개발자들은 시간을 단순하게 계산할 수 있는 기준점(기준 날짜)이 필요했지.

1970년 1월 1일 00:00:00 UTC를 선택한 이유는:

유닉스 개발 시점과 가까웠다 → 1969년 말에 개발되었으니 1970년을 기준으로 삼기 적절했음.
UTC(협정 세계시)를 사용하면 타임존 문제를 피할 수 있다 → 특정 지역이 아닌 전 세계적으로 통일된 시간이 필요했음.
과거로 갈수록 복잡한 날짜 계산을 피할 수 있다 → 윤년, 그레고리력 이전의 날짜 체계 등을 고려하지 않아도 됨. */